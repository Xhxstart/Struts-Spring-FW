package jp.co.fujifilm.cisa.monitor;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.nio.channels.FileChannel;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import com.fujifilm.common.util.DateUtils;
import com.fujifilm.common.util.FileIOUtils;
import com.fujifilm.common.util.StringUtils;



/**
 * 中間ファイル削除バッチ
 *
 * @author tei.rh
 *
 */
public class DeleteWorkDirBatch {

// <<-----------------CIMSA-Phase11Step2 影舞(cimsa01)ID83 2014/01/24 ADD pan END
	/**
	 * ログ設定ファイル名取得
	 *
	 * @return
	 */
	protected static String getLogConfigName() {
		return "jo_log4j.properties";
	}
	private static String drivreReplase = "D\\:";
	private static String ipReplase = "127.0.1.1";
	private static String preKeyWord = "url=\"jdbc:postgresql://";
	private static String sufKeyWord = ":5432/cisa\"";
	private static String proFileSuffix = "properties";
	private static String xmlFileSuffix = "xml";
	private static String srcstr ="/32 ";
	private static String dststr ="127.323.323.323";
	private static Map<String,String> backupFileMap = new HashMap<String,String>();

	/**
	 * メイン
	 * @throws IOException
	 */
	public static void main(String[] args) throws IOException {		// String textFromFile = FileUtils.readFileToString(new
		String filePath = "C:\\Program Files\\Apache Software Foundation\\Tomcat 8.5\\conf\\Catalina\\localhost\\cisa_manage.xml"; //给我你要读取的文件夹路径
		File outPath = new File("C:\\Program Files\\Apache Software Foundation\\Tomcat 8.5\\conf\\Catalina\\localhost"); //随便给一个输出文件夹的路径(不存在也可以)
		readFolder(filePath,outPath);
		
		//String profilepath = "C:\\cisa\\conf\\cisa_manage\\log4j.properties";
		//FileReader File = new FileReader(profilepath);
		
	}
	
	/**
	 * 
	 * 
	 * 
	 * 
	 * */
	public static void readFolder(String filePath,File outPath) {
		try {
			File file = new File(filePath);
			String filename = "";
			if (!file.isDirectory()) {
				System.out.println("--------This is a file !!");
				filename = file.getName();
				readFile(filePath, filename, 0, outPath);//调用 readFile 方法读取文件夹下所有文件
				System.out.println("--------所有文件操作完毕 !!");
			} else {
				System.out.println("--------This is a Directory !!");
				String[] fileList = file.list();
				for (int i=0; i<fileList.length; i++) {
					File readFile = new File(filePath + "\\" + fileList[i]);
					//获取路径为绝对路径
					String absolutepath = readFile.getAbsolutePath();
					filename = readFile.getName();//读到的文件名
					readFile(absolutepath,filename,i,outPath);//调用 readFile 方法读取文件夹下所有文件
				}
				
			}
		} catch (Exception e){
			 e.printStackTrace();
			 System.out.println(e.getMessage());
		}
		System.out.println("--------所有文件操作完毕 !!");
	}
	public static void readFile(String absolutePath,String fileName,int index,File outPath) {
		try {
			if(!StringUtils.isEmpty(absolutePath) && !StringUtils.isEmpty(fileName)) {
			//FileIOUtils.getSuffix(fileName);
			String suffix = fileName.substring(fileName.lastIndexOf(".") + 1);
//			if (proFileSuffix.equals(suffix)) {
//				readProperTiesFile(absolutePath);
//			} else if (xmlFileSuffix.equals(suffix)) {
//				setPropXML(absolutePath);
//			} 
			String backupFilePath = "";
			String backupPath = "";
			String updateTypeFolder = "";
			BufferedReader bufReader = new BufferedReader(new InputStreamReader(new FileInputStream(absolutePath)));
			StringBuffer strBuffer = new StringBuffer();
	
				for (String temp = null; (temp = bufReader.readLine())!=null; temp =null) {
					if (temp.indexOf(preKeyWord)!=-1 && temp.indexOf(sufKeyWord)!=-1) {
						//dststr = temp.substring(temp.indexOf(srcstr),9);
						String oldTemp = temp; 
						String oldStr = oldTemp.substring(temp.lastIndexOf(preKeyWord) + preKeyWord.length(), temp.indexOf(sufKeyWord));
						temp = temp.replace(oldStr, ipReplase);
					}
					
					strBuffer.append(temp);
					strBuffer.append(System.getProperty("line.separator"));//行与行之间的分割
				}
				bufReader.close();
				// 更新ディレクトリのファイルを一時保存WORKディレクトリにバックアップする				
				backupFile(updateTypeFolder, absolutePath);
				// ファイル更新する
				//检查输出文件夹是否存在，若不存在先创建
				if(FileIOUtils.mkDir(outPath.getAbsolutePath()) == true) { 
					System.out.println("已成功创建输出文件夹：" + outPath);
				}
				PrintWriter printWriter = new PrintWriter(outPath+"\\"+fileName);//替换后输出的文件位置（切记这里的E:/ttt 在你的本地必须有这个文件夹）
				printWriter.write(strBuffer.toString().toCharArray());
				printWriter.flush();
				printWriter.close();
				System.out.println("第 " + (index+1) +" 个文件   "+ absolutePath +"  已成功输出到    " +outPath+"\\"+fileName);
			}
		} catch (Exception e) {
			 e.printStackTrace();
			 System.out.println(e.getMessage()); 
		}
	}

	private static void readProperTiesFile(String profilepath) {
		Properties pro = new Properties();
		try {
			pro.load(new FileInputStream(profilepath));
			//用BufferedReader来读取配置文件，此路径为绝对路径
			OutputStream fos = new FileOutputStream(profilepath);
			//BufferedReader br = new BufferedReader(File);
			pro.setProperty("log4j.rootLogger", "value");
			//通过properties对象加载输入流
	
			System.out.println(pro.getProperty("log4j.appender.R.File"));
			System.out.println(pro.getProperty("log4j.appender.R.MaxBackupIndex"));
			
			pro.store(fos, "Update value");
			fos.close();
		} catch (IOException e) {
			// TODO 自動生成された catch ブロック
			e.printStackTrace();
			System.out.println(e.getMessage());
		}
		System.exit(1);
	}
	
	public static void setPropXML(String fnm) throws IOException, FileNotFoundException {
		Properties p = new Properties();
		File f = new File(fnm);
		if (f.exists()) {
			InputStream in = new FileInputStream(f);
			System.out.println("The setting file [" + fnm + "] load from catarina home.");
			try {
				p.loadFromXML(in);
			} finally {
				in.close();
			}
		} else {
			System.out.println("The setting file [" + fnm + "] load from class path.");
		}
		//用BufferedReader来读取配置文件，此路径为绝对路径
		OutputStream fos = new FileOutputStream(fnm);
		p.setProperty("output.condition.bk.color.patternN", "value");
		p.storeToXML(fos, "asdfasd");
		System.out.println(p.getProperty("entryroom.period.days.old"));
		fos.close();
	}
	
	public static boolean backupFile(String updateTypeFolder, String srcFilePath) {
		boolean backupResult = true; 
		File file = new File(srcFilePath);
		String backupfolderPath = updateTypeFolder + "/cisa/bin/direction_backup";
		String backupFilePath = "";
		String prebackupFileName = "backup_";
		if(file.exists() && file.isFile()) {
			backupFilePath = backupfolderPath + "//" + prebackupFileName + DateUtils.getDirYYYYMMDD()+ DateUtils.getFormattedNowDateTime("HH-mm-ss-SSS") + ".xml";
			// フォルダの生成
			FileIOUtils.mkDir(backupfolderPath);
		
			// ファイルバックアップ
			try {
				FileIOUtils.copyTransfer(srcFilePath, backupFilePath);
			} catch (IOException e) {
				backupResult = false;
				e.printStackTrace();
				System.out.println("ファイルバックアップ失敗しました");
			}
			backupFileMap.put(backupFilePath, srcFilePath);
		}
		return backupResult;
		
	}
	
	public static boolean fileRecovery() {
		boolean recoveryResult = true; 
		for (Map.Entry<String, String> entry : backupFileMap.entrySet()) {
			try {
				FileIOUtils.copyTransfer(entry.getKey(), entry.getValue());
			} catch (IOException e) {
				recoveryResult = false;
				e.printStackTrace();
				System.out.println("ファイルリカバリ失敗しました");
			}
		}
		return recoveryResult;
		
	}
	
	/**
	 * コピー元のパス[srcPath]から、コピー先のパス[destPath]へ ファイルのコピーを行います。
	 * コピー処理にはFileChannel#transferToメソッドを利用します。 尚、コピー処理終了後、入力・出力のチャネルをクローズします。
	 *
	 * @param srcPath
	 *            コピー元のパス
	 * @param destPath
	 *            コピー先のパス
	 * @throws IOException
	 *             何らかの入出力処理例外が発生した場合
	 */
	public static void copyTransfer(String srcPath, String destPath) throws IOException {
		FileChannel srcChannel = new FileInputStream(srcPath).getChannel();
		try {
			copyTransfer(srcChannel, destPath);
		} finally {
			srcChannel.close();
		}
	}

	public static void copyTransfer(FileChannel srcChannel, String destPath) throws IOException {
		FileChannel destChannel = new FileOutputStream(destPath).getChannel();
		try {
			srcChannel.transferTo(0, srcChannel.size(), destChannel);
		} finally {
			destChannel.close();
		}
	}

}
